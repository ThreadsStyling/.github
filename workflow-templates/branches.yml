name: CI

on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: "CI Checks"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.3-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Setup VPN config
        run: |
          echo "${{ secrets.VPN_CONFIG_FILE }}" > config.ovpn
          echo "${{ secrets.VPN_SECRET_USERNAME_PASSWORD }}" > secret.txt
          touch vpn.log

      - name: Connect VPN
        run: sudo openvpn --config "config.ovpn" --log "vpn.log" --daemon

      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch

      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - run: yarn prettier:check

      - run: yarn lint

      - run: npx prisma generate

      - run: yarn build
        env:
          AWS_REGION: eu-west-1
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}

      - run: yarn build:prod
        env:
          AWS_REGION: eu-west-1
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: AWS IAM Assume Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: "arn:aws:iam::946211468949:role/nest-terraform-deploy-role"
          role-duration-seconds: 1500
          role-session-name: GH-Actions-nest-staging

      - run: yarn test
        env:
          AWS_REGION: eu-west-1
          LOCAL_DATABASE_URL: "postgres://test-user:postgres@localhost:5432/test-db"

      - name: Kill VPN connection
        if: always()
        run: |
          sudo killall openvpn

      - name: Upload VPN logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: VPN logs
          path: vpn.log
